#!/usr/bin/env bash

set -e -o pipefail

HELP_MSG=$(cat <<EOM
kubectl execuser [options] <podname>

  Options:
    -u|--username <user>                     : user in the pod
    -n|--namespace <namespace>               : namespace containig the pod
    -c|--container-index <container-index>   : index of the container within the pod
    -s|--shell <shell>                       : shell to exec into in the pod
    -d|--debug                               : debug mode shows the variables in the plugin
    -v|--verbose                             : verbose mode
    -h|--help                                : show this help menu
EOM
)


function usage() {
  EXIT_VAL="$?"
  if [ "$EXIT_VAL" -ne 0 ] && [ "$EXIT_VAL" -ne 130 ] && [ "$EXIT_VAL" -ne 1 ] || [ "$HELP" = true ] ; then
    echo "$HELP_MSG"
  fi
}

trap usage EXIT

SHORTOPTS="u:n:s:c:dhv"
LONGOPTS="username:namespace:shell:index:debug,help,verbose,"

OPTS=$(getopt -o $SHORTOPTS -l $LONGOPTS -n "$0" -- "${@}")
eval set -- "$OPTS"

VARS=$(set -o posix ; set);

POD_USER="root"
COMMAND="sh"
NAMESPACE=$(kubectl config view --minify -o 'jsonpath={..namespace}')
NAMESPACE="${NAMESPACE:-default}"
CONTAINER_INDEX=0
VERBOSE=false

while true; do
  case "$1" in
    -d | --debug ) DEBUG=true; shift ;;
    -h | --help ) HELP=true; shift ;;
    -n | --namespace ) NAMESPACE=${2:-$NAMESPACE}; shift 2 ;;
    -s | --shell ) COMMAND="${2:-$COMMAND}"; shift 2 ;;
    -u | --username ) POD_USER=$2; shift 2 ;;
    -c | --container-index ) CONTAINER_INDEX_ARG=true; CONTAINER_INDEX=${2:-${CONTAINER_INDEX}}; shift 2 ;;
    -v | --verbose ) VERBOSE=true; shift ;;
    -- ) shift; break ;;
    * ) break ;;
  esac
done

POD_NAME=$1

[ "$DEBUG" = true ] &&
  grep -vFe "$VARS" <<<$(unset VARS; set +e; set -o posix; set)

[ "${HELP:-false}" = true ] &&
  exit 0

[ "${VERBOSE:-false}" = true ] &&
  set -x

[ -z "$POD_NAME" ] &&
  echo -e "[\e[91mERROR\e[0m] Podname missing!" &&
  exit 1

CONTAINERS="$(kubectl get pod -n $NAMESPACE $POD_NAME -o "jsonpath={range .status.containerStatuses[*]}{.name}{'\n'}{end}")"
NUM_CONTAINERS=$(echo "$CONTAINERS" | wc -l)

if [ "$NUM_CONTAINERS" -gt 1 ] && [ "$CONTAINER_INDEX_ARG" != true ]; then
    echo -e "[\e[93mWARN\e[0m] Container index argument missing (-c|--container-index). Default container index [0]"
    echo "$CONTAINERS" | awk 'BEGIN{line=0}{printf "\t%d) %s\n", line++, $0}'
fi

EXECUSER_POD="execuser-${POD_NAME}"
EXECUSER_POD=${EXECUSER_POD:0:63}  # Truncate to 64 char

NODENAME=$( kubectl get pod -n ${NAMESPACE} ${POD_NAME} -o go-template='{{.spec.nodeName}}' )
DOCKER_CONTAINER_ID=$( kubectl get pod -n ${NAMESPACE} ${POD_NAME} -o go-template="{{ (index .status.containerStatuses ${CONTAINER_INDEX}).containerID }}" )
CONTAINER_ID=${DOCKER_CONTAINER_ID#*//}

if [[ "$NODENAME" == *"master"* ]]; then
  MASTER_TOLERATIONS="\"tolerations\": [{ \"key\": \"node-role.kubernetes.io/master\" }],"
fi

CONTAINER_SPEC=$(cat <<EOM
{
    "apiVersion": "v1",
    "metadata": {
        "labels": {
            "k8s-app": "${EXECUSER_POD}"
        }
    },
    "spec": {
        "containers": [
            {
                "image": "docker",
                "name": "docker",
                "stdin": true,
                "stdinOnce": true,
                "tty": true,
                "restartPolicy": "Never",
                "resources": {
                    "limits": {
                        "cpu": "500m",
                        "memory": "50Mi"
                    },
                    "requests": {
                        "cpu": "0",
                        "memory": "0"
                    }
                },
                "args": [
                  "exec",
                  "-it",
                  "-u",
                  "${POD_USER}",
                  "${CONTAINER_ID}",
                  "${COMMAND}"
                ],
                "volumeMounts": [
                    {
                        "mountPath": "/var/run/docker.sock",
                        "name": "docker"
                    }
                ]
            }
        ],
        "nodeSelector": {
          "kubernetes.io/hostname": "${NODENAME}"
        },
        ${MASTER_TOLERATIONS}
        "volumes": [
            {
                "name": "docker",
                "hostPath": {
                    "path": "/var/run/docker.sock",
                    "type": "File"
                }
            }
        ]
    }
}
EOM
)

kubectl delete pods -n ${NAMESPACE} -l k8s-app="${EXECUSER_POD}" --grace-period 0 &>/dev/null
kubectl run -n ${NAMESPACE} -it --rm --restart=Never --image=docker --overrides="${CONTAINER_SPEC}" ${EXECUSER_POD}
