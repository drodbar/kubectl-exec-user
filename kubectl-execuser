#!/usr/bin/env bash

set -e

function usage() {
  echo "kubectl execuser pod [(-u|--username=)|(-n|--namespace=)|(-c|--container-index=)|(-s|--shell=)|(-t|--tolerations)|(-d|--debug-only)|(-v|--verbose)|(-h|--help)]"
}
VARS="`set -o posix ; set`";
ARGS="${@}"
POD=${1}
POD_USER="root"
COMMAND="sh"
CURRENT_NAMESPACE=$(kubectl config view --minify -o 'jsonpath={..namespace}')
NAMESPACE="${CURRENT_NAMESPACE:-default}"
CONTAINER_INDEX=0
VERBOSE=false

if [ $# -lt 1 ] || [ -z "$POD" ] ; then
    usage
    exit 1
fi

OPTS=`getopt -o u:n:s:c:dhtv -l "username:namespace:shell:index:debug,help,tolerations,verbose," -n "kubectl-execuser" -- "${@:2}"`

if [ $? -ne 0 ] ; then
    usage
    exit 1
fi

eval set -- "$OPTS"

while true; do
  case "$1" in
    -d | --debug-only ) DEBUG=true; shift ;;
    -h | --help ) HELP=true; shift ;;
    -n | --namespace ) NAMESPACE=${2:-$NAMESPACE}; shift; shift ;;
    -s | --shell ) COMMAND="${2:-$COMMAND}"; shift; shift ;;
    -u | --username ) POD_USER=$2; shift; shift ;;
    -c | --container-index ) CONTAINER_INDEX_ARG=true; CONTAINER_INDEX=${2:-${CONTAINER_INDEX}}; shift; shift ;;
    -t | --tolerations ) ENABLE_TOLERATIONS=true; shift ;;
    -v | --verbose ) VERBOSE=true; shift ;;
    -- ) shift; break ;;
    * ) break ;;
  esac
done

if [ "$DEBUG" = true ] ; then
    echo "$VARS"
    SCRIPT_VARS="`grep -vFe "$VARS" <<<"$(set -o posix ; set)" | grep -v ^VARS=`";
    echo "$SCRIPT_VARS"
    exit 0
fi

# Print help
if [ "${HELP:-false}" = true ] ; then
    usage
    exit 0
fi

if [ "${VERBOSE:-false}" = true ] ; then
  set -x
fi

CONTAINERS="$(kubectl get po -n $NAMESPACE $POD -o "jsonpath={range .status.containerStatuses[*]}{.name}{'\n'}{end}")"
NUM_CONTAINERS=$(echo "$CONTAINERS" | wc -l)

if [ "$NUM_CONTAINERS" -gt 1 ] && [ "$CONTAINER_INDEX_ARG" != true ]; then
  echo "Container index arg missing. Defaulting to index 0,"
  echo "consider passing the opt argument (-c|--container-index) to specify a different container"
  echo "$CONTAINERS" | awk 'BEGIN{line=0}{printf "\t%d) %s\n", line++, $0}'
fi

EXECUSER_POD="execuser-${POD}"
EXECUSER_POD=${EXECUSER_POD:0:63}  # Truncate to 64 char

NODENAME=$( kubectl -n ${NAMESPACE} get pod ${POD} -o go-template='{{.spec.nodeName}}' )
DOCKER_CONTAINER_ID=$( kubectl -n ${NAMESPACE} get pod ${POD} -o go-template="{{ (index .status.containerStatuses ${CONTAINER_INDEX}).containerID }}" )
CONTAINER_ID=${DOCKER_CONTAINER_ID#*//}

if [ "$ENABLE_TOLERATIONS" = true ]; then

(read -r -d '' TOLERATIONS << EOM
        "tolerations": [
          { "key": "node-role.kubernetes.io/master" }
        ],
EOM
) || true

fi

(read -r -d '' CONTAINER_SPEC << EOM
{
    "apiVersion": "v1",
    "metadata": {
    "labels": {
        "k8s-app": "execuser",
        "run": "${EXECUSER_POD}"
      }
    },
    "spec": {
        "containers": [
            {
                "image": "docker",
                "name": "docker",
                "stdin": true,
                "stdinOnce": true,
                "tty": true,
                "restartPolicy": "Never",
                "resources": {
                    "limits": {
                        "cpu": "500m",
                        "memory": "50Mi"
                    },
                    "requests": {
                        "cpu": "0",
                        "memory": "0"
                    }
                },
                "args": [
                  "exec",
                  "-it",
                  "-u",
                  "${POD_USER}",
                  "${CONTAINER_ID}",
                  "${COMMAND}"
                ],
                "volumeMounts": [
                    {
                        "mountPath": "/var/run/docker.sock",
                        "name": "docker"
                    }
                ]
            }
        ],
        "nodeSelector": {
          "kubernetes.io/hostname": "${NODENAME}"
        },
        ${TOLERATIONS}
        "volumes": [
            {
                "name": "docker",
                "hostPath": {
                    "path": "/var/run/docker.sock",
                    "type": "File"
                }
            }
        ]
    }
}
EOM
) || true

kubectl delete pods -n ${NAMESPACE} -l run="${EXECUSER_POD}" --grace-period 0 &>/dev/null
kubectl run -n ${NAMESPACE} -it --rm --restart=Never --image=docker --overrides="${CONTAINER_SPEC}" ${EXECUSER_POD}
